{"version":3,"sources":["../../../src/server/controllers/searches.controller.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,YAAY,mBAAS,KAAT,CAAe,QAAf,qBAAZ;;AAEN,IAAM,SAAS,mBAAW,eAAK,OAAL,CAApB;;;AAGN,IAAI,iBAAiB,SAAjB,cAAiB,CAAC,MAAD,EAAS,KAAT;WAAmB,iBAAE,GAAF,CAAM,MAAN,EAAc;eAAK,iBAAE,IAAF,CAAO,CAAP,EAAU,KAAV;KAAL;CAAjC;;;;;;;;;sCAGF,KAAK,KAAK;;AAErB,gBAAI,IAAJ,CAAS,OAAT,EAFqB;;;;oCAKZ,KAAK,KAAK;AACnB,gBAAI,OAAO,IAAP,CAAY,IAAI,KAAJ,CAAZ,CAAuB,MAAvB,KAAkC,CAAlC,EAAqC;;AAErC,wBAAQ,GAAR,CAAY,QAAZ,EAAsB,IAAI,KAAJ,CAAtB,CAFqC;aAAzC;;AAKA,gBAAM,OAAO,IAAI,MAAJ,CAAW,UAAX,CANM;;AAQnB,gBAAM,WAAW,SAAX,QAAW,GAAM;AACnB,0BAAU,MAAV,CAAiB,EAAC,MAAM,IAAN,EAAY,WAAW,sBAAO,KAAK,GAAL,EAAP,EAAmB,MAAnB,CAA0B,qBAA1B,CAAX,EAA9B,EAA4F,UAAC,GAAD,EAAM,MAAN,EAAiB;AACzG,wBAAI,GAAJ,EAAS;AAAE,gCAAQ,GAAR,CAAY,QAAZ,EAAsB,GAAtB,EAAF;qBAAT;iBADwF,CAA5F,CADmB;aAAN;;;;;AARE,kBAiBnB,CAAO,MAAP,CAAc,IAAd,EAAoB,EAAC,KAAK,EAAL,EAArB,EAA+B,UAAC,GAAD,EAAM,OAAN,EAAkB;;AAE7C,oBAAI,GAAJ,EAAS;AACL,wBAAI,IAAJ,CAAS,EAAC,OAAO,uBAAuB,IAAvB,EAAjB,EADK;iBAAT,MAEO;;AAEH;;;AAFG,uBAKH,CAAI,IAAJ,CAAS,eAAe,OAAf,EAAwB,CAAC,KAAD,EAAQ,OAAR,EAAiB,WAAjB,CAAxB,CAAT,EALG;iBAFP;aAF2B,CAA/B,CAjBmB;;;;6CAgCD,KAAK,KAAK;;AAE5B,sBAAU,IAAV,CAAe,EAAf,EAAmB,IAAnB,CAAwB,EAAC,KAAI,CAAC,CAAD,EAA7B,EAAkC,KAAlC,CAAwC,EAAxC,EAA4C,IAA5C,CAAiD,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC9D,oBAAI,GAAJ,EAAS,QAAQ,GAAR,CAAY,QAAZ,EAAsB,GAAtB,EAAT;;;AAD8D,mBAI9D,CAAI,IAAJ,CAAS,eAAe,MAAf,EAAuB,CAAC,MAAD,EAAS,WAAT,CAAvB,CAAT,EAJ8D;aAAjB,CAAjD,CAF4B","file":"searches.controller.js","sourcesContent":["import mongoose from 'mongoose';\nimport Search from 'bing.search';\nimport util from 'util';\nimport keys from '../config/keys.config';\nimport ImgSearchSchema from '../models/searches.model';\nconst ImgSearch = mongoose.model('lookup', ImgSearchSchema);\nimport moment from 'moment';\nconst search = new Search(keys.API_KEY);\nimport _ from 'lodash';\n\nvar objectFilterer = (target, props) => _.map(target, e => _.pick(e, props));\n\nexport default class {\n    handleLanding (req, res) {\n        // Landing page\n        res.send('hello')\n    }\n\n    handleQuery (req, res) {\n        if (Object.keys(req.query).length !== 0) {\n            // Handle offset\n            console.log('query:', req.query)\n        }\n\n        const term = req.params.searchterm;\n\n        const postToDb = () => {\n            ImgSearch.create({term: term, timestamp: moment(Date.now()).format('YYYY-MM-DD HH:mm:ss')}, (err, search) => {\n                if (err) { console.log('ERROR:', err) }\n            });\n        };\n\n        // TODO: offset query (top of this method)\n\n        // Use Bing to search for images\n        search.images(term, {top: 10}, (err, results) => {\n            // console.log(util.inspect(results, {colors: true, depth: null}));\n            if (err) {\n                res.send({error: 'Nothing found for ' + term})\n            } else {\n                // Post to db for /api/searches\n                postToDb();\n\n                // Output results to client\n                res.send(objectFilterer(results, ['url', 'title', 'sourceUrl']));\n            }\n        });\n\n    }\n\n    getListOfPrevQueries (req, res) {\n        // Handle list of 10 most recent searches\n        ImgSearch.find({}).sort({_id:-1}).limit(10).exec((err, result) => {\n            if (err) console.log('ERROR:', err);\n\n            // Output results to client\n            res.send(objectFilterer(result, ['term', 'timestamp']));\n        });\n    }\n}"]}